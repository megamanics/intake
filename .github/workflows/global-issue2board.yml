name: Move Repo Issue to Org Project - Legacy
on:
  issues:
    types: [opened, reopened, labeled, milestoned]
  workflow_dispatch: {}    
jobs:
  addIssueToGlobalProject:
    if: contains(github.event.issue.title, 'Scoping Form')
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub event context
        env:
          GH_EVENT: ${{ toJson(github.event) }}
        run: echo "$GH_EVENT"
      - name: Add To GitHub Projects Beta
        uses: megamanics/add-to-project@main
        with:
          # outside https://github.com/orgs/github/projects/6144
          # https://github.com/orgs/devops-testbed/projects/1
          project-url:  https://github.com/users/megamanics/projects/1
          github-token: ${{ secrets.TOKEN1 }}
  addIssueToOrgProject:
    if: contains(github.event.issue.title, 'Scoping Form')
    runs-on: ubuntu-latest
    steps:
      - name: Add To devops-testbed Projects Beta
        uses: megamanics/add-to-project@main
        with:
          project-url:  https://github.com/orgs/devops-testbed/projects/1
          github-token: ${{ secrets.TOKEN1 }}
  addIssueToGHOrgProject:
    if: contains(github.event.issue.title, 'Scoping Form')
    runs-on: ubuntu-latest
    steps:
      - name: Add To GitHub Projects Beta
        uses: megamanics/add-to-project@main
        with:
          project-url:  https://github.com/orgs/github/projects/6144
          github-token: ${{ secrets.TOKEN1 }}
  createCardToGlobalProject:
    if: contains(github.event.issue.title, 'Scoping Form')
    runs-on: ubuntu-latest
    steps:
      - name: Move issue
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          previews: 'inertia' # required for Projects API
          script: |
            const issue = context.payload.issue
            const prjColumns = [
              {id:  14473503,  columnName: "ToDo", projectName: "intake", match: ({labels}) => labels.includes("scoping")},
              {id:  14477859,  columnName: "ToDo", projectName: "kanban", match: ({title})  => title.toLowerCase().match(/.*ooo.*/) !== null },
              {id:  14479798,  columnName: "ToDo", projectName: "kanban", match: _ => true},
            ]

            function determineProjectColumn(params) {
              return prjColumns.find(e => e.match(params))
            }

            console.log("Determining appropriate board for issue number " + issue.number)
            const column = determineProjectColumn({labels: issue.labels.map(label => label.name),  title: issue.title})

            console.log("Attempting to add issue " + issue.number + " to \"" + column.columnName + "\" on \"" + column.projectName + "\" (" + column.id + ")")

            try {
              await github.rest.projects.createCard({
                column_id: column.id,
                content_id: issue.id,
                content_type: "Issue"
              })
              console.log("Issue " + issue.number + " added to \"" + column.columnName + "\" on \"" + column.projectName + "\" (" + column.id + ")")
            } catch(err) {
              if (err.status == 422 && err.errors[0].message === "Project already has the associated issue") {
                console.log("Issue number " + issue.number + " is already on the project board \"" + column.projectName + "\".")
              } else {
                throw err
              }
            }


